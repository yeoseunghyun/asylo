#
# Copyright 2018 Asylo authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

licenses(["notice"])  # Apache v2.0

# Architecture abstraction layer.
#

package(
    default_visibility = ["//asylo:implementation"],
)

load("//asylo/bazel:asylo.bzl", "ASYLO_ALL_BACKENDS")
load("//asylo/bazel:proto.bzl", "asylo_proto_library")
load("//asylo/bazel:copts.bzl", "ASYLO_DEFAULT_COPTS")

# Protobuf used by fork.
asylo_proto_library(
    name = "fork_proto",
    srcs = ["fork.proto"],
    visibility = ["//visibility:public"],
    deps = ["//asylo:enclave_proto"],
)

cc_proto_library(
    name = "fork_cc_proto",
    visibility = ["//visibility:public"],
    deps = [":fork_proto"],
)

# Target exposing trusted architecture-dependent components for the build
# configuration.
cc_library(
    name = "trusted_arch",
    hdrs = [
        "include/trusted/hardware_random.h",
        "include/trusted/host_calls.h",
        "include/trusted/register_signal.h",
        "include/trusted/time.h",
    ],
    copts = ASYLO_DEFAULT_COPTS,
    deps = select({
        "//asylo/platform/primitives:sgx": ["trusted_sgx"],
        "//conditions:default": ["trusted_build_only"],
    }) + [
        "//asylo:enclave_cc_proto",
        "//asylo/platform/core:shared_name",
        "//asylo/util:status",
    ],
)

# Target exposing untrusted client components for all backends.
cc_library(
    name = "untrusted_arch",
    hdrs = [
        "sgx/untrusted/sgx_client.h",
    ],
    copts = ASYLO_DEFAULT_COPTS,
    deps = [
        ":fork_cc_proto",
        ":untrusted_sgx",
        "//asylo:enclave_cc_proto",
        "//asylo/platform/core:untrusted_core",
        "//asylo/platform/primitives/sgx:untrusted_sgx",
        "//asylo/util:status",
        "@com_google_absl//absl/base:core_headers",
        "@linux_sgx//:urts",
    ],
)

# Command to invoke the sgx edger8r tool to generate the bridge code.

ASYLO_PREFIX = "external/com_google_asylo/"

SGX_EDGER8R_COMMAND = (
    "./$(location @linux_sgx//:sgx_edger8r) " +
    "$(location sgx/bridge.edl) " +
    "--search-path " + ASYLO_PREFIX + "asylo/platform/arch/sgx " +
    "--search-path asylo/platform/arch/sgx " +
    "--search-path $(@D)/sgx " +  # Reference previously generated files
    "--trusted --trusted-dir $(@D)/sgx/trusted/ " +
    "--untrusted --untrusted-dir $(@D)/sgx/untrusted/"
)

# Command to update the generated bridge files and header paths for the
# SDK dependencies.

SGX_PREFIX = ""

UPDATE_SDK_DEPS_COMMAND = (
    "for file in $$(ls $(@D)/sgx/*trusted/bridge_*.[ch]); do " +
    "sed -i " +
    "-e '1s!^!// Generated file. See bridge.edl\\n!' " +
    "-e 's!bridge_u.h!generated_bridge_u.h!' " +
    "-e 's!bridge_t.h!generated_bridge_t.h!' " +
    "-e 's!sgx_trts.h!" + SGX_PREFIX + "include/sgx_trts.h!' " +
    "-e 's!sgx_edger8r.h!" + SGX_PREFIX + "include/sgx_edger8r.h!' " +
    "-e 's!sgx_lfence.h!" + SGX_PREFIX + "include/sgx_lfence.h!' " +
    "-e 's!<mbusafecrt.h>!\"" + SGX_PREFIX + "include/se_memcpy.h\"!' " +
    "$$file && " +
    "mv $$file $$(dirname $$file)/generated_$$(basename $$file); " +
    "done"
)

# The bridge code generated by the Intel SGX SDK edger8r tool.
genrule(
    name = "generate_bridge",
    srcs = [
        "sgx/bridge.edl",
        "//asylo/platform/primitives/sgx:errno.edl",
        "//asylo/third_party/intel:sgx_tstdc.edl",
        "//asylo/platform/arch/sgx/host_calls_generator:generated_bridge.edl",
        "//asylo/platform/primitives/sgx:bridge.edl",
    ],
    outs = [
        "sgx/trusted/generated_bridge_t.c",
        "sgx/trusted/generated_bridge_t.h",
        "sgx/untrusted/generated_bridge_u.c",
        "sgx/untrusted/generated_bridge_u.h",
    ],
    cmd = (SGX_EDGER8R_COMMAND + " && " + UPDATE_SDK_DEPS_COMMAND),
    tools = ["@linux_sgx//:sgx_edger8r"],
)

# Untrusted runtime components for SGX
cc_library(
    name = "untrusted_sgx",
    srcs = [
        "sgx/untrusted/generated_bridge_u.c",
        "sgx/untrusted/generated_bridge_u.h",
        "sgx/untrusted/ocalls.cc",
        "sgx/untrusted/sgx_client.cc",
        "//asylo/platform/arch/sgx/host_calls_generator:generated_ocalls.cc",
    ],
    hdrs = ["sgx/untrusted/sgx_client.h"],
    copts = ASYLO_DEFAULT_COPTS,
    visibility = ["//visibility:private"],
    deps = [
        ":fork_cc_proto",
        "//asylo:enclave_cc_proto",
        "//asylo/platform/common:bridge_proto_serializer",
        "//asylo/platform/common:bridge_types",
        "//asylo/platform/common:debug_strings",
        "//asylo/platform/common:futex",
        "//asylo/platform/common:memory",
        "//asylo/platform/core:shared_name",
        "//asylo/platform/core:untrusted_core",
        "//asylo/platform/primitives:untrusted_primitives",
        "//asylo/platform/primitives/sgx:sgx_error_space",
        "//asylo/platform/primitives/sgx:untrusted_sgx",
        "//asylo/platform/primitives/util:dispatch_table",
        "//asylo/platform/storage/utils:fd_closer",
        "//asylo/util:elf_reader",
        "//asylo/util:file_mapping",
        "//asylo/util:logging",
        "//asylo/util:status",
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:span",
        "@linux_sgx//:public",
        "@linux_sgx//:urts",
    ],
)

# Trusted runtime components for SGX.
cc_library(
    name = "trusted_sgx",
    srcs = [
        "sgx/trusted/ecalls.cc",
        "sgx/trusted/enclave_syscalls.cc",
        "sgx/trusted/exceptions.cc",
        "sgx/trusted/host_calls.cc",
        "//asylo/platform/arch/sgx/host_calls_generator:generated_host_calls.cc",
    ] + select(
        {
            "@linux_sgx//:sgx_hw": [
                "sgx/trusted/hardware_random.cc",
                "sgx/trusted/register_signal.cc",
            ],
            "@linux_sgx//:sgx_sim": [
                "sgx_sim/trusted/hardware_random.cc",
                "sgx_sim/trusted/register_signal.cc",
            ],
        },
        no_match_error = "Expected an SGX backend configuration (e.g., --config=sgx)",
    ),
    hdrs = [
        "include/trusted/hardware_random.h",
        "include/trusted/host_calls.h",
        "include/trusted/fork.h",
        "include/trusted/register_signal.h",
    ],
    copts = select(
        {
            "@linux_sgx//:sgx_hw": [
                "-mrdrnd",  # All SGX chips also support RDRAND
            ],
            "@linux_sgx//:sgx_sim": [],
        },
        "Must be built for SGX hardware or simulation backend",
    ) + ASYLO_DEFAULT_COPTS,
    linkstatic = 1,
    tags = ["asylo-sgx"],
    visibility = ["//visibility:private"],
    deps = [
        ":trusted_sgx_bridge",
        ":fork_cc_proto",
        "//asylo:enclave_cc_proto",
        "//asylo/platform/common:bridge_proto_serializer",
        "//asylo/platform/common:bridge_types",
        "//asylo/platform/common:memory",
        "//asylo/platform/core:entry_points",
        "//asylo/platform/core:shared_name",
        "//asylo/platform/posix/signal:signal_manager",
        "//asylo/platform/primitives",
        "//asylo/platform/primitives:trusted_backend",
        "//asylo/platform/primitives:trusted_primitives",
        "//asylo/platform/primitives/sgx:sgx_error_space",
        "//asylo/platform/primitives/sgx:trusted_sgx",
        "//asylo/util:logging",
        "//asylo/util:status",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/strings",
        "@linux_sgx//:public",
        "@linux_sgx//:trts",
    ],
)

# This target supports building trusted targets with the system native compiler,
# which provides a very basic sanity check for Asylo clients in contexts
# where pulling in the cross-compiler toolchain is inconvenient or tricky.
# Attempting to load a dynamic library linked against this target will fail
# since no actual implementation is provided.
cc_library(
    name = "trusted_build_only",
    hdrs = [
        "include/trusted/hardware_random.h",
        "include/trusted/host_calls.h",
    ],
    visibility = ["//visibility:private"],
    deps = ["//asylo/platform/core:shared_name"],
)

# Trusted side of the SGX SDK generated bridge.
cc_library(
    name = "trusted_sgx_bridge",
    srcs = [
        "sgx/trusted/generated_bridge_t.c",
    ],
    hdrs = [
        "sgx/trusted/generated_bridge_t.h",
    ],
    copts = ASYLO_DEFAULT_COPTS,
    linkstatic = 1,
    tags = ["asylo-sgx"],
    deps = [
        "//asylo/platform/common:bridge_types",
        "//asylo/platform/core:shared_name",
        "@linux_sgx//:public",
        "@linux_sgx//:trts",
    ],
)

# fork related runtime.
cc_library(
    name = "trusted_fork",
    srcs = select({
        "@linux_sgx//:sgx_hw": ["sgx/trusted/fork.cc"],
        "//conditions:default": ["common/trusted/fork.cc"],
    }),
    hdrs = ["include/trusted/fork.h"],
    copts = ASYLO_DEFAULT_COPTS,
    linkstatic = 1,
    tags = ASYLO_ALL_BACKENDS,
    deps = [
        ":fork_cc_proto",
        ":trusted_arch",
        "//asylo/platform/primitives:trusted_backend",
        "@com_google_absl//absl/strings",
        "//asylo:enclave_cc_proto",
    ] + select({
        "@linux_sgx//:sgx_hw": [
            "@com_google_absl//absl/base:core_headers",
            "//asylo/crypto:aead_cryptor",
            "//asylo/crypto/util:bssl_util",
            "//asylo/crypto/util:byte_container_view",
            "//asylo/crypto/util:trivial_object_util",
            "//asylo/platform/posix/memory:memory",
            "//asylo/platform/primitives/sgx:sgx_error_space",
            "//asylo/grpc/auth/core:client_ekep_handshaker",
            "//asylo/grpc/auth/core:server_ekep_handshaker",
            "//asylo/identity:descriptions",
            "//asylo/identity:identity_acl_evaluator",
            "//asylo/identity/sgx:code_identity_util",
            "//asylo/identity/sgx:sgx_code_identity_expectation_matcher",
            "//asylo/identity/sgx:sgx_local_assertion_generator",
            "//asylo/identity/sgx:sgx_local_assertion_verifier",
            "//asylo/util:cleansing_types",
            "//asylo/util:cleanup",
        ],
        "//conditions:default": [],
    }),
)
