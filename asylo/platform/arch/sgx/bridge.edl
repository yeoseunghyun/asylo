/*
 *
 * Copyright 2018 Asylo authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

// EDL file for enclave infrastructure. Defines function calls across enclave
// boundary. The "trusted" scope defines "ecall" functions that are called on
// the host side and enter the enclave and execute inside it. The "untrusted"
// scope defines "ocall" functions transition across the enclave boundary in the
// opposite direction - called from within enclave, executed on the host side.
//
// See generate_bridge.sh for build instruction.
//
// In addition, new function definitions must be added to untrusted/ocalls.cc
// and to trusted/ecalls.cc for untrusted and trusted functions respectively.
//
// Once new functions are defined and generated, user-friendly wrappers need to
// be added to untrusted/enclave_calls.* and trusted/host_calls.* respectively.
enclave {
  include "asylo/platform/common/bridge_types.h"
  include "asylo/platform/core/shared_name_kind.h"

  from "../../../third_party/intel/sgx_tstdc.edl" import
      sgx_thread_wait_untrusted_event_ocall,
      sgx_oc_cpuidex,
      sgx_thread_set_untrusted_event_ocall,
      sgx_thread_setwait_untrusted_events_ocall,
      sgx_thread_set_multiple_untrusted_events_ocall;

  from "../../../platform/primitives/sgx/bridge.edl" import *;
  from "../../../platform/primitives/sgx/errno.edl" import *;
  from "host_calls_generator/generated_bridge.edl" import *;

  trusted {
    // Invokes the trusted entry point designated by `selector`.
    // WARNING: Do not add calls before ecall_displatch_trusted_call, as callers
    // may assume this to be the first entry in the generated ecall table.
    public int ecall_dispatch_trusted_call(uint64_t selector,
                                          [user_check] void *buffer);

    // Intended for use by enclave signal implementaion.
    //
    // Invokes signal handling entry point.
    exception_handler public int ecall_handle_signal(
        [in, size=input_len] const char *input,
        bridge_size_t input_len);

    // Invokes a utility ecall that enters the enclave to take a snapshot.
    // This is a private ecall because it should only be invoked by an
    // ocall(fork).
    utility_tcs public int ecall_take_snapshot(
	[out] char **output,
	[out] bridge_size_t *output_len);

    // Invokes a utility ecall that enters the enclave to restore it from a
    // snapshot.
    utility_tcs public int ecall_restore(
        [user_check] const char *input,
	bridge_size_t input_len,
	[user_check] char **output,
	[user_check] bridge_size_t *output_len);

    // Invokes a utility ecall that enters the enclave to encrypt and transfer
    // the snpashot key.
    utility_tcs public int ecall_transfer_secure_snapshot_key(
        [in, size=input_len] const char *input,
	bridge_size_t input_len,
	[out] char **output,
	[out] bridge_size_t *output_len);

    // Invokes a utility ecall that enters the enclave to initiate migration
    utility_tcs public int ecall_initiate_migration();
  };

  // Unless otherwise specified, each of the following calls invokes the
  // corresponding function on the host.
  untrusted {
    //////////////////////////////////////
    //              IO                  //
    //////////////////////////////////////

    int ocall_enc_untrusted_puts([in, string] const char *str) propagate_errno;
    void *ocall_enc_untrusted_malloc(bridge_size_t size) propagate_errno;
    void **ocall_enc_untrusted_allocate_buffers(bridge_size_t count,
        bridge_size_t size) propagate_errno;
    void ocall_enc_untrusted_deallocate_free_list([user_check] void **free_list,
        bridge_size_t count) propagate_errno;
    int ocall_enc_untrusted_open([in, string] const char *path_name,
                                 int flags, uint32_t mode) propagate_errno;
    int ocall_enc_untrusted_fcntl(int fd, int cmd, int64_t arg) propagate_errno;
    int ocall_enc_untrusted_stat([in, string] const char *pathname,
                                 [out] struct bridge_stat *stat_buffer)
                                 propagate_errno;
    int ocall_enc_untrusted_fstat(int fd, [out] struct bridge_stat *stat_buffer)
                                  propagate_errno;
    int ocall_enc_untrusted_lstat([in, string] const char *pathname,
                                  [out] struct bridge_stat *stat_buffer)
                                  propagate_errno;
    bridge_ssize_t ocall_enc_untrusted_write_with_untrusted_ptr(
        int fd, [user_check] const void *buf, int size) propagate_errno;
    bridge_ssize_t ocall_enc_untrusted_read_with_untrusted_ptr(
        int fd, [user_check] void *buf, int size) propagate_errno;

    //////////////////////////////////////
    //           Sockets                //
    //////////////////////////////////////

    int ocall_enc_untrusted_socket(int domain, int type, int protocol)
                                   propagate_errno;
    int ocall_enc_untrusted_connect(int sockfd,
                                    [in] const struct bridge_sockaddr *addr)
                                    propagate_errno;
    int ocall_enc_untrusted_bind(int sockfd,
                                 [in] const struct bridge_sockaddr *addr)
                                 propagate_errno;
    int ocall_enc_untrusted_accept(int sockfd,
                                   [out] struct bridge_sockaddr *addr)
                                   propagate_errno;
    char *ocall_enc_untrusted_inet_ntop(int af,
                                        [in, size=src_size] const void *src,
                                        bridge_size_t src_size,
                                        [out, size=buf_size] char *dst,
                                        bridge_size_t buf_size) propagate_errno;
    int ocall_enc_untrusted_inet_pton(enum AfFamily af,
                                      [in, string] const char *src,
                                      [out, size=dst_size] void *dst,
                                      bridge_size_t dst_size) propagate_errno;
    bridge_ssize_t ocall_enc_untrusted_sendmsg(
        int sockfd, [user_check] const struct bridge_msghdr *msg, int flags)
        propagate_errno;

    bridge_ssize_t ocall_enc_untrusted_recvmsg(
        int sockfd, [user_check] struct bridge_msghdr *msg, int flags)
        propagate_errno;

    int ocall_enc_untrusted_getaddrinfo(
        [in, string] const char *node, [in, string] const char *service,
        [in, size=serialized_hints_len] const char *serialized_hints,
        bridge_size_t serialized_hints_len, [out] char **serialized_res_start,
        [out] bridge_size_t *serialized_res_len) propagate_errno;

    int ocall_enc_untrusted_getsockopt(int sockfd, int level, int optname,
                                       [in, out, size=optlen_in] void *optval,
                                       unsigned int optlen_in,
                                       [out] unsigned int *optlen_out)
                                       propagate_errno;

    int ocall_enc_untrusted_setsockopt(
        int sockfd, int level, int optname,
        [in, size=optlen] const void *optval, bridge_size_t optlen)
        propagate_errno;

    int ocall_enc_untrusted_getsockname(int sockfd,
                                        [out] struct bridge_sockaddr *addr)
                                        propagate_errno;

    int ocall_enc_untrusted_getpeername(int sockfd,
                                        [out] struct bridge_sockaddr *addr)
                                        propagate_errno;

    ssize_t ocall_enc_untrusted_recvfrom(
        [in, size=serialized_args_len] const char *serialized_args,
        bridge_ssize_t serialized_args_len,
        [out] char **serialized_buffer,
        [out] char **serialized_output,
        [out] bridge_ssize_t *serialized_output_len) propagate_errno;

    //////////////////////////////////////
    //           Threading              //
    //////////////////////////////////////

    // Creates a thread to call ecall_donate_thread() then returns.
    int ocall_enc_untrusted_thread_create([in, string] const char *name);

    //////////////////////////////////////
    //             poll.h               //
    //////////////////////////////////////

    int ocall_enc_untrusted_poll(
        [in, out, count = nfds] struct bridge_pollfd *fds, unsigned int nfds,
        int timeout) propagate_errno;

    //////////////////////////////////////
    //           epoll.h                //
    //////////////////////////////////////

    int ocall_enc_untrusted_epoll_create(int size) propagate_errno;

    int ocall_enc_untrusted_epoll_ctl(
        [in, size=serialized_args_len] const char *serialized_args,
        bridge_size_t serialized_args_len) propagate_errno;

    int ocall_enc_untrusted_epoll_wait(
        [in, size=serialized_args_len] const char *serialized_args,
        bridge_size_t serialized_args_len,
        [out] char **serialized_events,
        [out] bridge_size_t *serialized_events_len) propagate_errno;

    //////////////////////////////////////
    //           inotify.h              //
    //////////////////////////////////////

    int ocall_enc_untrusted_inotify_init1(int non_block);

    int ocall_enc_untrusted_inotify_add_watch(
        [in, size=serialized_args_len] const char *serialized_args,
        bridge_size_t serialized_args_len) propagate_errno;

    int ocall_enc_untrusted_inotify_rm_watch(
        [in, size=serialized_args_len] const char *serialized_args,
        bridge_size_t serialized_args_len) propagate_errno;

    int ocall_enc_untrusted_inotify_read(int fd, bridge_size_t count,
        [out] char **serialized_events,
        [out] bridge_size_t *serialized_events_len) propagate_errno;

    //////////////////////////////////////
    //           ifaddrs.h              //
    //////////////////////////////////////

    int ocall_enc_untrusted_getifaddrs(
        [out] char **serialized_ifaddrs,
        [out] bridge_ssize_t *serialized_ifaddrs_len) propagate_errno;

    //////////////////////////////////////
    //            pwd.h                 //
    //////////////////////////////////////

    int ocall_enc_untrusted_getpwuid(
        uid_t uid, [out] struct BridgePassWd *bridge_password) propagate_errno;

    //////////////////////////////////////
    //           sched.h                //
    //////////////////////////////////////

    int ocall_enc_untrusted_sched_getaffinity(
        int64_t pid,
        [out, size=128/*sizeof(cpu_set_t)*/] struct BridgeCpuSet *mask)
        propagate_errno;

    //////////////////////////////////////
    //           time.h                 //
    //////////////////////////////////////

    int ocall_enc_untrusted_nanosleep(
        [in, size=16/*sizeof(struct timespec)*/]
        const struct bridge_timespec *req,
        [out, size=16/*sizeof(struct timespec)*/] struct bridge_timespec *rem)
        propagate_errno;

    int ocall_enc_untrusted_times([out] struct BridgeTms *bridge_buf)
        propagate_errno;

    int ocall_enc_untrusted_clock_gettime(
        bridge_clockid_t clk_id,
        [out, size=16/*sizeof(struct timespec)*/] struct bridge_timespec *tp)
        propagate_errno;

    int ocall_enc_untrusted_getitimer(
        enum TimerType which, [out] struct BridgeITimerVal *bridge_curr_value) propagate_errno;

    int ocall_enc_untrusted_setitimer(
        enum TimerType which, [in] struct BridgeITimerVal *bridge_new_value,
        [out] struct BridgeITimerVal *bridge_old_value) propagate_errno;

    //////////////////////////////////////
    //            signal.h              //
    //////////////////////////////////////

    int ocall_enc_untrusted_register_signal_handler(
        int bridge_signum, [in] const struct BridgeSignalHandler *handler,
        [in, string] const char *name);

    int ocall_enc_untrusted_sigprocmask(
        int how, [in] const bridge_sigset_t *set,
        [out] bridge_sigset_t *oldset);

    int ocall_enc_untrusted_raise(int sig);

    //////////////////////////////////////
    //         sys/resource.h           //
    //////////////////////////////////////

    int ocall_enc_untrusted_getrusage(
        enum RUsageTarget who, [out] struct BridgeRUsage *bridge_usage)
        propagate_errno;

    //////////////////////////////////////
    //           sys/file.h             //
    //////////////////////////////////////

    int ocall_enc_untrusted_flock(int fd, int operation) propagate_errno;

    //////////////////////////////////////
    //          sys/select.h            //
    //////////////////////////////////////

    int ocall_enc_untrusted_select(
        int nfds, [in, out] struct BridgeFDSet *bridge_readfds,
	[in, out] struct BridgeFDSet *bridge_writefds,
	[in, out] struct BridgeFDSet *bridge_exceptfds,
	[in] struct bridge_timeval *bridge_timeout) propagate_errno;

    //////////////////////////////////////
    //          sys/syslog.h            //
    //////////////////////////////////////

    void ocall_enc_untrusted_openlog([in, string] const char *ident, int option,
                                     int facility);

    void ocall_enc_untrusted_syslog(int priority,
                                    [in, string] const char *message);

    //////////////////////////////////////
    //           sys/time.h             //
    //////////////////////////////////////

    int ocall_enc_untrusted_gettimeofday(
        [out, size=16/*sizeof(struct timeval)*/] struct bridge_timeval *tv,
        [user_check] void *tz) propagate_errno;

    //////////////////////////////////////
    //          sys/utsname.h           //
    //////////////////////////////////////

    int ocall_enc_untrusted_uname(
        [out] struct BridgeUtsName *bridge_utsname_val) propagate_errno;

    //////////////////////////////////////
    //            unistd.h              //
    //////////////////////////////////////

    int ocall_enc_untrusted_pipe2([out] int pipefd[2], int flags)
        propagate_errno;
    int64_t ocall_enc_untrusted_sysconf(enum SysconfConstants name)
        propagate_errno;
    uint32_t ocall_enc_untrusted_sleep(uint32_t seconds);
    void ocall_enc_untrusted__exit(int rc);
    pid_t ocall_enc_untrusted_fork(
        [in, string]const char *enclave_name,
	[in, size = config_len] const char *config,
	bridge_size_t config_len,
	bool restore_snapshot)
	allow(ecall_take_snapshot, ecall_restore) propagate_errno;
	int ocall_enc_untrusted_initiate_migration(
		[in, string]const char *enclave_name) propagate_errno;

    //////////////////////////////////////
    //           utime.h                //
    //////////////////////////////////////

    int ocall_enc_untrusted_utime(
        [in, string] const char *filename,
        [in, size=16/*sizeof(struct utimbuf)*/]
        const struct bridge_utimbuf *times)
        propagate_errno;

    int ocall_enc_untrusted_utimes(
        [in, string] const char *filename,
	[in] const struct bridge_timeval *bridge_access_time,
	[in] const struct bridge_timeval *bridge_modification_time)
	propagate_errno;

    //////////////////////////////////////
    //             wait.h               //
    //////////////////////////////////////

    pid_t ocall_enc_untrusted_wait3([out] struct BridgeWStatus *bridge_wstatus,
                                    int options,
                                    [out] struct BridgeRUsage *bridge_usage)
				    propagate_errno;

    pid_t ocall_enc_untrusted_waitpid(
        pid_t pid, [out] struct BridgeWStatus *wstatus, int options)
	propagate_errno;

    //////////////////////////////////////
    //           Runtime support        //
    //////////////////////////////////////

    void *ocall_enc_untrusted_acquire_shared_resource(
        enum SharedNameKind kind, [in, string] const char *name);

    int ocall_enc_untrusted_release_shared_resource(
        enum SharedNameKind kind, [in, string] const char *name);

    //////////////////////////////////////
    //           Debugging              //
    //////////////////////////////////////
    // Temporary calls to help with debugging, or other workarounds go here.

    // Prints nbytes of memory starting at buf as hex.
    void ocall_enc_untrusted_hex_dump([in, size=nbytes] const void *buf,
                                      int nbytes);
  };

};
